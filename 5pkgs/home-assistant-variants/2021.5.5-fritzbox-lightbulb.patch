diff --git a/homeassistant/components/fritzbox/__init__.py b/homeassistant/components/fritzbox/__init__.py
index 16b005359e..61b50567f6 100644
--- a/homeassistant/components/fritzbox/__init__.py
+++ b/homeassistant/components/fritzbox/__init__.py
@@ -1,4 +1,4 @@
-"""Support for AVM Fritz!Box smarthome devices."""
+"""Support for AVM FRITZ!SmartHome devices."""
 from __future__ import annotations
 
 from datetime import timedelta
@@ -17,7 +17,7 @@ from homeassistant.const import (
     CONF_USERNAME,
     EVENT_HOMEASSISTANT_STOP,
 )
-from homeassistant.core import HomeAssistant
+from homeassistant.core import Event, HomeAssistant
 from homeassistant.exceptions import ConfigEntryAuthFailed
 from homeassistant.helpers.update_coordinator import (
     CoordinatorEntity,
@@ -25,10 +25,11 @@ from homeassistant.helpers.update_coordinator import (
 )
 
 from .const import CONF_CONNECTIONS, CONF_COORDINATOR, DOMAIN, LOGGER, PLATFORMS
+from .model import EntityInfo
 
 
 async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
-    """Set up the AVM Fritz!Box platforms."""
+    """Set up the AVM FRITZ!SmartHome platforms."""
     fritz = Fritzhome(
         host=entry.data[CONF_HOST],
         user=entry.data[CONF_USERNAME],
@@ -63,7 +64,7 @@ async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
             data[device.ain] = device
         return data
 
-    async def async_update_coordinator():
+    async def async_update_coordinator() -> dict[str, FritzhomeDevice]:
         """Fetch all device data."""
         return await hass.async_add_executor_job(_update_fritz_devices)
 
@@ -81,7 +82,7 @@ async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
 
     hass.config_entries.async_setup_platforms(entry, PLATFORMS)
 
-    def logout_fritzbox(event):
+    def logout_fritzbox(event: Event) -> None:
         """Close connections to this fritzbox."""
         fritz.logout()
 
@@ -93,7 +94,7 @@ async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
 
 
 async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
-    """Unloading the AVM Fritz!Box platforms."""
+    """Unloading the AVM FRITZ!SmartHome platforms."""
     fritz = hass.data[DOMAIN][entry.entry_id][CONF_CONNECTIONS]
     await hass.async_add_executor_job(fritz.logout)
 
@@ -109,10 +110,10 @@ class FritzBoxEntity(CoordinatorEntity):
 
     def __init__(
         self,
-        entity_info: dict[str, str],
-        coordinator: DataUpdateCoordinator,
+        entity_info: EntityInfo,
+        coordinator: DataUpdateCoordinator[dict[str, FritzhomeDevice]],
         ain: str,
-    ):
+    ) -> None:
         """Initialize the FritzBox entity."""
         super().__init__(coordinator)
 
@@ -139,21 +140,21 @@ class FritzBoxEntity(CoordinatorEntity):
         }
 
     @property
-    def unique_id(self):
+    def unique_id(self) -> str:
         """Return the unique ID of the device."""
         return self._unique_id
 
     @property
-    def name(self):
+    def name(self) -> str:
         """Return the name of the device."""
         return self._name
 
     @property
-    def unit_of_measurement(self):
+    def unit_of_measurement(self) -> str | None:
         """Return the unit of measurement."""
         return self._unit_of_measurement
 
     @property
-    def device_class(self):
+    def device_class(self) -> str | None:
         """Return the device class."""
         return self._device_class
diff --git a/homeassistant/components/fritzbox/binary_sensor.py b/homeassistant/components/fritzbox/binary_sensor.py
index e118414bb2..1a604bf75b 100644
--- a/homeassistant/components/fritzbox/binary_sensor.py
+++ b/homeassistant/components/fritzbox/binary_sensor.py
@@ -1,4 +1,5 @@
 """Support for Fritzbox binary sensors."""
+from __future__ import annotations
 from typing import Callable
 
 from homeassistant.components.binary_sensor import (
@@ -21,8 +22,8 @@ from .const import CONF_COORDINATOR, DOMAIN as FRITZBOX_DOMAIN
 async def async_setup_entry(
     hass: HomeAssistant, entry: ConfigEntry, async_add_entities: Callable
 ) -> None:
-    """Set up the Fritzbox binary sensor from ConfigEntry."""
-    entities = []
+    """Set up the FRITZ!SmartHome binary sensor from ConfigEntry."""
+    entities: list[FritzboxBinarySensor] = []
     coordinator = hass.data[FRITZBOX_DOMAIN][entry.entry_id][CONF_COORDINATOR]
 
     for ain, device in coordinator.data.items():
@@ -46,11 +47,11 @@ async def async_setup_entry(
 
 
 class FritzboxBinarySensor(FritzBoxEntity, BinarySensorEntity):
-    """Representation of a binary Fritzbox device."""
+    """Representation of a binary FRITZ!SmartHome device."""
 
     @property
-    def is_on(self):
+    def is_on(self) -> bool:
         """Return true if sensor is on."""
         if not self.device.present:
             return False
-        return self.device.alert_state
+        return self.device.alert_state  # type: ignore [no-any-return]
diff --git a/homeassistant/components/fritzbox/climate.py b/homeassistant/components/fritzbox/climate.py
index 121c379dc5..559a86579e 100644
--- a/homeassistant/components/fritzbox/climate.py
+++ b/homeassistant/components/fritzbox/climate.py
@@ -1,6 +1,9 @@
-"""Support for AVM Fritz!Box smarthome thermostate devices."""
+"""Support for AVM FRITZ!SmartHome thermostate devices."""
+from __future__ import annotations
 from typing import Callable
 
+from typing import Any
+
 from homeassistant.components.climate import ClimateEntity
 from homeassistant.components.climate.const import (
     ATTR_HVAC_MODE,
@@ -35,6 +38,7 @@ from .const import (
     CONF_COORDINATOR,
     DOMAIN as FRITZBOX_DOMAIN,
 )
+from .model import ClimateExtraAttributes
 
 SUPPORT_FLAGS = SUPPORT_TARGET_TEMPERATURE | SUPPORT_PRESET_MODE
 
@@ -55,8 +59,8 @@ OFF_REPORT_SET_TEMPERATURE = 0.0
 async def async_setup_entry(
     hass: HomeAssistant, entry: ConfigEntry, async_add_entities: Callable
 ) -> None:
-    """Set up the Fritzbox smarthome thermostat from ConfigEntry."""
-    entities = []
+    """Set up the FRITZ!SmartHome thermostat from ConfigEntry."""
+    entities: list[FritzboxThermostat] = []
     coordinator = hass.data[FRITZBOX_DOMAIN][entry.entry_id][CONF_COORDINATOR]
 
     for ain, device in coordinator.data.items():
@@ -80,17 +84,17 @@ async def async_setup_entry(
 
 
 class FritzboxThermostat(FritzBoxEntity, ClimateEntity):
-    """The thermostat class for Fritzbox smarthome thermostates."""
+    """The thermostat class for FRITZ!SmartHome thermostates."""
 
     @property
-    def supported_features(self):
+    def supported_features(self) -> int:
         """Return the list of supported features."""
         return SUPPORT_FLAGS
 
     @property
-    def available(self):
+    def available(self) -> bool:
         """Return if thermostat is available."""
-        return self.device.present
+        return self.device.present  # type: ignore [no-any-return]
 
     @property
     def temperature_unit(self):
@@ -98,38 +102,38 @@ class FritzboxThermostat(FritzBoxEntity, ClimateEntity):
         return TEMP_CELSIUS
 
     @property
-    def precision(self):
+    def precision(self) -> float:
         """Return precision 0.5."""
         return PRECISION_HALVES
 
     @property
-    def current_temperature(self):
+    def current_temperature(self) -> float:
         """Return the current temperature."""
-        return self.device.actual_temperature
+        return self.device.actual_temperature  # type: ignore [no-any-return]
 
     @property
-    def target_temperature(self):
+    def target_temperature(self) -> float:
         """Return the temperature we try to reach."""
         if self.device.target_temperature == ON_API_TEMPERATURE:
             return ON_REPORT_SET_TEMPERATURE
         if self.device.target_temperature == OFF_API_TEMPERATURE:
             return OFF_REPORT_SET_TEMPERATURE
-        return self.device.target_temperature
+        return self.device.target_temperature  # type: ignore [no-any-return]
 
-    async def async_set_temperature(self, **kwargs):
+    async def async_set_temperature(self, **kwargs: Any) -> None:
         """Set new target temperature."""
-        if ATTR_HVAC_MODE in kwargs:
-            hvac_mode = kwargs.get(ATTR_HVAC_MODE)
+        if kwargs.get(ATTR_HVAC_MODE) is not None:
+            hvac_mode = kwargs[ATTR_HVAC_MODE]
             await self.async_set_hvac_mode(hvac_mode)
-        elif ATTR_TEMPERATURE in kwargs:
-            temperature = kwargs.get(ATTR_TEMPERATURE)
+        elif kwargs.get(ATTR_TEMPERATURE) is not None:
+            temperature = kwargs[ATTR_TEMPERATURE]
             await self.hass.async_add_executor_job(
                 self.device.set_target_temperature, temperature
             )
         await self.coordinator.async_refresh()
 
     @property
-    def hvac_mode(self):
+    def hvac_mode(self) -> str:
         """Return the current operation mode."""
         if (
             self.device.target_temperature == OFF_REPORT_SET_TEMPERATURE
@@ -140,11 +144,11 @@ class FritzboxThermostat(FritzBoxEntity, ClimateEntity):
         return HVAC_MODE_HEAT
 
     @property
-    def hvac_modes(self):
+    def hvac_modes(self) -> list[str]:
         """Return the list of available operation modes."""
         return OPERATION_LIST
 
-    async def async_set_hvac_mode(self, hvac_mode):
+    async def async_set_hvac_mode(self, hvac_mode: str) -> None:
         """Set new operation mode."""
         if hvac_mode == HVAC_MODE_OFF:
             await self.async_set_temperature(temperature=OFF_REPORT_SET_TEMPERATURE)
@@ -154,19 +158,20 @@ class FritzboxThermostat(FritzBoxEntity, ClimateEntity):
             )
 
     @property
-    def preset_mode(self):
+    def preset_mode(self) -> str | None:
         """Return current preset mode."""
         if self.device.target_temperature == self.device.comfort_temperature:
             return PRESET_COMFORT
         if self.device.target_temperature == self.device.eco_temperature:
             return PRESET_ECO
+        return None
 
     @property
-    def preset_modes(self):
+    def preset_modes(self) -> list[str]:
         """Return supported preset modes."""
         return [PRESET_ECO, PRESET_COMFORT]
 
-    async def async_set_preset_mode(self, preset_mode):
+    async def async_set_preset_mode(self, preset_mode: str) -> None:
         """Set preset mode."""
         if preset_mode == PRESET_COMFORT:
             await self.async_set_temperature(
@@ -176,19 +181,19 @@ class FritzboxThermostat(FritzBoxEntity, ClimateEntity):
             await self.async_set_temperature(temperature=self.device.eco_temperature)
 
     @property
-    def min_temp(self):
+    def min_temp(self) -> int:
         """Return the minimum temperature."""
         return MIN_TEMPERATURE
 
     @property
-    def max_temp(self):
+    def max_temp(self) -> int:
         """Return the maximum temperature."""
         return MAX_TEMPERATURE
 
     @property
-    def extra_state_attributes(self):
+    def extra_state_attributes(self) -> ClimateExtraAttributes:
         """Return the device specific state attributes."""
-        attrs = {
+        attrs: ClimateExtraAttributes = {
             ATTR_STATE_BATTERY_LOW: self.device.battery_low,
             ATTR_STATE_DEVICE_LOCKED: self.device.device_lock,
             ATTR_STATE_LOCKED: self.device.lock,
diff --git a/homeassistant/components/fritzbox/config_flow.py b/homeassistant/components/fritzbox/config_flow.py
index 2472e50278..3ae3368f4a 100644
--- a/homeassistant/components/fritzbox/config_flow.py
+++ b/homeassistant/components/fritzbox/config_flow.py
@@ -1,17 +1,22 @@
-"""Config flow for AVM Fritz!Box."""
+"""Config flow for AVM FRITZ!SmartHome."""
+from __future__ import annotations
+
+from typing import Any
 from urllib.parse import urlparse
 
 from pyfritzhome import Fritzhome, LoginError
 from requests.exceptions import HTTPError
 import voluptuous as vol
 
-from homeassistant import config_entries
 from homeassistant.components.ssdp import (
     ATTR_SSDP_LOCATION,
     ATTR_UPNP_FRIENDLY_NAME,
     ATTR_UPNP_UDN,
 )
+from homeassistant.config_entries import ConfigEntry, ConfigFlow
 from homeassistant.const import CONF_HOST, CONF_PASSWORD, CONF_USERNAME
+from homeassistant.data_entry_flow import FlowResult
+from homeassistant.helpers.typing import DiscoveryInfoType
 
 from .const import DEFAULT_HOST, DEFAULT_USERNAME, DOMAIN
 
@@ -36,23 +41,22 @@ RESULT_NOT_SUPPORTED = "not_supported"
 RESULT_SUCCESS = "success"
 
 
-class FritzboxConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):
-    """Handle a AVM Fritz!Box config flow."""
+class FritzboxConfigFlow(ConfigFlow, domain=DOMAIN):
+    """Handle a AVM FRITZ!SmartHome config flow."""
 
     VERSION = 1
-    CONNECTION_CLASS = config_entries.CONN_CLASS_LOCAL_POLL
 
-    def __init__(self):
+    def __init__(self) -> None:
         """Initialize flow."""
-        self._entry = None
-        self._host = None
-        self._name = None
-        self._password = None
-        self._username = None
+        self._entry: ConfigEntry | None = None
+        self._host: str | None = None
+        self._name: str | None = None
+        self._password: str | None = None
+        self._username: str | None = None
 
-    def _get_entry(self):
+    def _get_entry(self, name: str) -> FlowResult:
         return self.async_create_entry(
-            title=self._name,
+            title=name,
             data={
                 CONF_HOST: self._host,
                 CONF_PASSWORD: self._password,
@@ -60,7 +64,8 @@ class FritzboxConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):
             },
         )
 
-    async def _update_entry(self):
+    async def _update_entry(self) -> None:
+        assert self._entry is not None
         self.hass.config_entries.async_update_entry(
             self._entry,
             data={
@@ -71,7 +76,7 @@ class FritzboxConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):
         )
         await self.hass.config_entries.async_reload(self._entry.entry_id)
 
-    def _try_connect(self):
+    def _try_connect(self) -> str:
         """Try to connect and check auth."""
         fritzbox = Fritzhome(
             host=self._host, user=self._username, password=self._password
@@ -88,25 +93,24 @@ class FritzboxConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):
         except OSError:
             return RESULT_NO_DEVICES_FOUND
 
-    async def async_step_user(self, user_input=None):
+    async def async_step_user(
+        self, user_input: dict[str, Any] | None = None
+    ) -> FlowResult:
         """Handle a flow initialized by the user."""
         errors = {}
 
         if user_input is not None:
-
-            for entry in self.hass.config_entries.async_entries(DOMAIN):
-                if entry.data[CONF_HOST] == user_input[CONF_HOST]:
-                    return self.async_abort(reason="already_configured")
+            self._async_abort_entries_match({CONF_HOST: user_input[CONF_HOST]})
 
             self._host = user_input[CONF_HOST]
-            self._name = user_input[CONF_HOST]
+            self._name = str(user_input[CONF_HOST])
             self._password = user_input[CONF_PASSWORD]
             self._username = user_input[CONF_USERNAME]
 
             result = await self.hass.async_add_executor_job(self._try_connect)
 
             if result == RESULT_SUCCESS:
-                return self._get_entry()
+                return self._get_entry(self._name)
             if result != RESULT_INVALID_AUTH:
                 return self.async_abort(reason=result)
             errors["base"] = result
@@ -115,9 +119,10 @@ class FritzboxConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):
             step_id="user", data_schema=DATA_SCHEMA_USER, errors=errors
         )
 
-    async def async_step_ssdp(self, discovery_info):
+    async def async_step_ssdp(self, discovery_info: DiscoveryInfoType) -> FlowResult:
         """Handle a flow initialized by discovery."""
         host = urlparse(discovery_info[ATTR_SSDP_LOCATION]).hostname
+        assert isinstance(host, str)
         self.context[CONF_HOST] = host
 
         uuid = discovery_info.get(ATTR_UPNP_UDN)
@@ -132,19 +137,21 @@ class FritzboxConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):
                 return self.async_abort(reason="already_in_progress")
 
         # update old and user-configured config entries
-        for entry in self.hass.config_entries.async_entries(DOMAIN):
+        for entry in self._async_current_entries():
             if entry.data[CONF_HOST] == host:
                 if uuid and not entry.unique_id:
                     self.hass.config_entries.async_update_entry(entry, unique_id=uuid)
                 return self.async_abort(reason="already_configured")
 
         self._host = host
-        self._name = discovery_info.get(ATTR_UPNP_FRIENDLY_NAME) or host
+        self._name = str(discovery_info.get(ATTR_UPNP_FRIENDLY_NAME) or host)
 
         self.context["title_placeholders"] = {"name": self._name}
         return await self.async_step_confirm()
 
-    async def async_step_confirm(self, user_input=None):
+    async def async_step_confirm(
+        self, user_input: dict[str, Any] | None = None
+    ) -> FlowResult:
         """Handle user-confirmation of discovered node."""
         errors = {}
 
@@ -154,7 +161,8 @@ class FritzboxConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):
             result = await self.hass.async_add_executor_job(self._try_connect)
 
             if result == RESULT_SUCCESS:
-                return self._get_entry()
+                assert self._name is not None
+                return self._get_entry(self._name)
             if result != RESULT_INVALID_AUTH:
                 return self.async_abort(reason=result)
             errors["base"] = result
@@ -166,16 +174,20 @@ class FritzboxConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):
             errors=errors,
         )
 
-    async def async_step_reauth(self, data):
+    async def async_step_reauth(self, data: dict[str, str]) -> FlowResult:
         """Trigger a reauthentication flow."""
-        self._entry = self.hass.config_entries.async_get_entry(self.context["entry_id"])
+        entry = self.hass.config_entries.async_get_entry(self.context["entry_id"])
+        assert entry is not None
+        self._entry = entry
         self._host = data[CONF_HOST]
-        self._name = data[CONF_HOST]
+        self._name = str(data[CONF_HOST])
         self._username = data[CONF_USERNAME]
 
         return await self.async_step_reauth_confirm()
 
-    async def async_step_reauth_confirm(self, user_input=None):
+    async def async_step_reauth_confirm(
+        self, user_input: dict[str, Any] | None = None
+    ) -> FlowResult:
         """Handle reauthorization flow."""
         errors = {}
 
diff --git a/homeassistant/components/fritzbox/const.py b/homeassistant/components/fritzbox/const.py
index 9189fbd81c..cf7c60b0f1 100644
--- a/homeassistant/components/fritzbox/const.py
+++ b/homeassistant/components/fritzbox/const.py
@@ -1,26 +1,29 @@
-"""Constants for the AVM Fritz!Box integration."""
+"""Constants for the AVM FRITZ!SmartHome integration."""
+from __future__ import annotations
+
 import logging
+from typing import Final
 
-ATTR_STATE_BATTERY_LOW = "battery_low"
-ATTR_STATE_DEVICE_LOCKED = "device_locked"
-ATTR_STATE_HOLIDAY_MODE = "holiday_mode"
-ATTR_STATE_LOCKED = "locked"
-ATTR_STATE_SUMMER_MODE = "summer_mode"
-ATTR_STATE_WINDOW_OPEN = "window_open"
+ATTR_STATE_BATTERY_LOW: Final = "battery_low"
+ATTR_STATE_DEVICE_LOCKED: Final = "device_locked"
+ATTR_STATE_HOLIDAY_MODE: Final = "holiday_mode"
+ATTR_STATE_LOCKED: Final = "locked"
+ATTR_STATE_SUMMER_MODE: Final = "summer_mode"
+ATTR_STATE_WINDOW_OPEN: Final = "window_open"
 
-ATTR_TEMPERATURE_UNIT = "temperature_unit"
+ATTR_TEMPERATURE_UNIT: Final = "temperature_unit"
 
-ATTR_TOTAL_CONSUMPTION = "total_consumption"
-ATTR_TOTAL_CONSUMPTION_UNIT = "total_consumption_unit"
+ATTR_TOTAL_CONSUMPTION: Final = "total_consumption"
+ATTR_TOTAL_CONSUMPTION_UNIT: Final = "total_consumption_unit"
 
-CONF_CONNECTIONS = "connections"
-CONF_COORDINATOR = "coordinator"
+CONF_CONNECTIONS: Final = "connections"
+CONF_COORDINATOR: Final = "coordinator"
 
-DEFAULT_HOST = "fritz.box"
-DEFAULT_USERNAME = "admin"
+DEFAULT_HOST: Final = "fritz.box"
+DEFAULT_USERNAME: Final = "admin"
 
-DOMAIN = "fritzbox"
+DOMAIN: Final = "fritzbox"
 
-LOGGER: logging.Logger = logging.getLogger(__package__)
+LOGGER: Final[logging.Logger] = logging.getLogger(__package__)
 
-PLATFORMS = ["binary_sensor", "climate", "switch", "sensor"]
+PLATFORMS: Final[list[str]] = ["binary_sensor", "climate", "light", "switch", "sensor"]
diff --git a/homeassistant/components/fritzbox/light.py b/homeassistant/components/fritzbox/light.py
new file mode 100644
index 0000000000..acb5c35920
--- /dev/null
+++ b/homeassistant/components/fritzbox/light.py
@@ -0,0 +1,169 @@
+from typing import Any
+from typing import Callable
+
+from homeassistant.components.fritzbox import FritzBoxEntity
+from homeassistant.components.light import (
+    ATTR_BRIGHTNESS,
+    ATTR_COLOR_TEMP,
+    ATTR_HS_COLOR,
+    SUPPORT_BRIGHTNESS,
+    SUPPORT_COLOR,
+    SUPPORT_COLOR_TEMP,
+    COLOR_MODE_COLOR_TEMP,
+    COLOR_MODE_HS,
+    Light,
+    LightEntity,
+)
+from homeassistant.config_entries import ConfigEntry
+from homeassistant.const import (
+    ATTR_DEVICE_CLASS,
+    ATTR_ENTITY_ID,
+    ATTR_NAME,
+    ATTR_UNIT_OF_MEASUREMENT,
+    DEVICE_CLASS_ILLUMINANCE,
+    LIGHT_LUX,
+)
+from homeassistant.core import HomeAssistant
+from homeassistant.util import color
+
+from . import FritzBoxEntity
+from .const import CONF_COORDINATOR, DOMAIN as FRITZBOX_DOMAIN
+
+SUPPORT_FLAGS = SUPPORT_BRIGHTNESS | SUPPORT_COLOR | SUPPORT_COLOR_TEMP
+SUPPORTED_COLOR_MODES = {COLOR_MODE_COLOR_TEMP, COLOR_MODE_HS}
+
+
+async def async_setup_entry(
+    hass: HomeAssistant, entry: ConfigEntry, async_add_entities: Callable
+) -> None:
+    entities: list[FritzboxLight] = []
+    coordinator = hass.data[FRITZBOX_DOMAIN][entry.entry_id][CONF_COORDINATOR]
+
+    for ain, device in coordinator.data.items():
+        if not device.has_lightbulb:
+            continue
+
+        supported_color_temps = await hass.async_add_executor_job(
+            device.get_color_temps
+        )
+
+        supported_colors = await hass.async_add_executor_job(device.get_colors)
+
+        entities.append(
+            FritzboxLight(
+                {
+                    ATTR_NAME: f"{device.name}",
+                    ATTR_ENTITY_ID: f"{device.ain}",
+                    ATTR_UNIT_OF_MEASUREMENT: LIGHT_LUX,
+                    ATTR_DEVICE_CLASS: DEVICE_CLASS_ILLUMINANCE,
+                },
+                coordinator,
+                ain,
+                supported_colors,
+                supported_color_temps,
+            )
+        )
+
+    async_add_entities(entities)
+
+
+class FritzboxLight(FritzBoxEntity, LightEntity):
+    def __init__(
+        self,
+        entity_info,
+        coordinator,
+        ain,
+        supported_colors,
+        supported_color_temps,
+    ) -> None:
+        """Initialize the FritzboxLight entity."""
+        super().__init__(entity_info, coordinator, ain)
+
+        max_kelvin = int(max(supported_color_temps))
+        min_kelvin = int(min(supported_color_temps))
+
+        # max kelvin is min mireds and min kelvin is max mireds
+        self._attr_min_mireds = color.color_temperature_kelvin_to_mired(max_kelvin)
+        self._attr_max_mireds = color.color_temperature_kelvin_to_mired(min_kelvin)
+
+        # Fritz!DECT 500 only supports 12 values for hue, with 3 saturations each.
+        # Map supported colors to dict {hue: [sat1, sat2, sat3]} for easier lookup
+        self._supported_hs = {}
+        for values in supported_colors.values():
+            hue = int(values[0][0])
+            self._supported_hs[hue] = [
+                int(values[0][1]),
+                int(values[1][1]),
+                int(values[2][1]),
+            ]
+
+    @property
+    def available(self) -> bool:
+        """Return if lightbulb is available."""
+        return self.device.present  # type: ignore [no-any-return]
+
+    @property
+    def is_on(self) -> bool:
+        """If the light is currently on or off."""
+        return self.device.state  # type: ignore [no-any-return]
+
+    @property
+    def brightness(self) -> int:
+        """Return the current Brightness."""
+        return self.device.level  # type: ignore [no-any-return]
+
+    @property
+    def hs_color(self):
+        """Return the hs color value."""
+        # Don't return hue and saturation unless in color mode
+        if self.device.color_mode != "1":
+            return None
+
+        hue = self.device.hue
+        saturation = self.device.saturation
+
+        return (hue, float(saturation) * 100.0 / 255.0)
+
+    @property
+    def color_temp(self):
+        """Return the CT color value."""
+        # Don't return color temperature unless in color temperature mode
+        if self.device.color_mode != "4":
+            return None
+
+        kelvin = self.device.color_temp
+        return color.color_temperature_kelvin_to_mired(kelvin)
+
+    @property
+    def supported_color_modes(self) -> set:
+        """Flag supported color modes."""
+        return SUPPORTED_COLOR_MODES
+
+    async def async_turn_on(self, **kwargs: Any) -> None:
+        """Turn the light on."""
+        if kwargs.get(ATTR_BRIGHTNESS) is not None:
+            level = kwargs[ATTR_BRIGHTNESS]
+            await self.hass.async_add_executor_job(self.device.set_level, level)
+        if kwargs.get(ATTR_HS_COLOR) is not None:
+            hass_hue = int(kwargs[ATTR_HS_COLOR][0])
+            hass_saturation = round(kwargs[ATTR_HS_COLOR][1] * 255.0 / 100.0)
+            # find supported hs values closest to what user selected
+            hue = min(self._supported_hs.keys(), key=lambda x: abs(x - hass_hue))
+            saturation = min(
+                self._supported_hs[hue], key=lambda x: abs(x - hass_saturation)
+            )
+            await self.hass.async_add_executor_job(
+                self.device.set_color, (hue, saturation)
+            )
+
+        if kwargs.get(ATTR_COLOR_TEMP) is not None:
+            kelvin = color.color_temperature_kelvin_to_mired(kwargs[ATTR_COLOR_TEMP])
+            await self.hass.async_add_executor_job(self.device.set_color_temp, kelvin)
+
+        await self.hass.async_add_executor_job(self.device.set_state_on)
+        await self.coordinator.async_refresh()
+
+    async def async_turn_off(self, **kwargs: Any) -> None:
+        """Turn the light off."""
+        await self.hass.async_add_executor_job(self.device.set_state_off)
+        await self.coordinator.async_refresh()
diff --git a/homeassistant/components/fritzbox/manifest.json b/homeassistant/components/fritzbox/manifest.json
index 3daecb1980..c1db226d34 100644
--- a/homeassistant/components/fritzbox/manifest.json
+++ b/homeassistant/components/fritzbox/manifest.json
@@ -2,7 +2,7 @@
   "domain": "fritzbox",
   "name": "AVM FRITZ!SmartHome",
   "documentation": "https://www.home-assistant.io/integrations/fritzbox",
-  "requirements": ["pyfritzhome==0.4.2"],
+  "requirements": ["pyfritzhome==0.6.2"],
   "ssdp": [
     {
       "st": "urn:schemas-upnp-org:device:fritzbox:1"
diff --git a/homeassistant/components/fritzbox/model.py b/homeassistant/components/fritzbox/model.py
new file mode 100644
index 0000000000..1cde7b9ca7
--- /dev/null
+++ b/homeassistant/components/fritzbox/model.py
@@ -0,0 +1,43 @@
+"""Models for the AVM FRITZ!SmartHome integration."""
+from __future__ import annotations
+
+from typing import TypedDict
+
+
+class EntityInfo(TypedDict):
+    """TypedDict for EntityInfo."""
+
+    name: str
+    entity_id: str
+    unit_of_measurement: str | None
+    device_class: str | None
+
+
+class ClimateExtraAttributes(TypedDict, total=False):
+    """TypedDict for climates extra attributes."""
+
+    battery_low: bool
+    device_locked: bool
+    locked: bool
+    battery_level: int
+    holiday_mode: bool
+    summer_mode: bool
+    window_open: bool
+
+
+class SensorExtraAttributes(TypedDict):
+    """TypedDict for sensors extra attributes."""
+
+    device_locked: bool
+    locked: bool
+
+
+class SwitchExtraAttributes(TypedDict, total=False):
+    """TypedDict for sensors extra attributes."""
+
+    device_locked: bool
+    locked: bool
+    total_consumption: str
+    total_consumption_unit: str
+    temperature: str
+    temperature_unit: str
diff --git a/homeassistant/components/fritzbox/sensor.py b/homeassistant/components/fritzbox/sensor.py
index 39e7f6db09..207ac93bd1 100644
--- a/homeassistant/components/fritzbox/sensor.py
+++ b/homeassistant/components/fritzbox/sensor.py
@@ -1,4 +1,5 @@
-"""Support for AVM Fritz!Box smarthome temperature sensor only devices."""
+"""Support for AVM FRITZ!SmartHome temperature sensor only devices."""
+from __future__ import annotations
 from typing import Callable
 
 from homeassistant.components.sensor import SensorEntity
@@ -9,6 +10,7 @@ from homeassistant.const import (
     ATTR_NAME,
     ATTR_UNIT_OF_MEASUREMENT,
     DEVICE_CLASS_BATTERY,
+    DEVICE_CLASS_TEMPERATURE,
     PERCENTAGE,
     TEMP_CELSIUS,
 )
@@ -21,13 +23,14 @@ from .const import (
     CONF_COORDINATOR,
     DOMAIN as FRITZBOX_DOMAIN,
 )
+from .model import SensorExtraAttributes
 
 
 async def async_setup_entry(
     hass: HomeAssistant, entry: ConfigEntry, async_add_entities: Callable
 ) -> None:
-    """Set up the Fritzbox smarthome sensor from ConfigEntry."""
-    entities = []
+    """Set up the FRITZ!SmartHome sensor from ConfigEntry."""
+    entities: list[FritzBoxEntity] = []
     coordinator = hass.data[FRITZBOX_DOMAIN][entry.entry_id][CONF_COORDINATOR]
 
     for ain, device in coordinator.data.items():
@@ -42,7 +45,7 @@ async def async_setup_entry(
                         ATTR_NAME: f"{device.name}",
                         ATTR_ENTITY_ID: f"{device.ain}",
                         ATTR_UNIT_OF_MEASUREMENT: TEMP_CELSIUS,
-                        ATTR_DEVICE_CLASS: None,
+                        ATTR_DEVICE_CLASS: DEVICE_CLASS_TEMPERATURE,
                     },
                     coordinator,
                     ain,
@@ -67,26 +70,26 @@ async def async_setup_entry(
 
 
 class FritzBoxBatterySensor(FritzBoxEntity, SensorEntity):
-    """The entity class for Fritzbox sensors."""
+    """The entity class for FRITZ!SmartHome sensors."""
 
     @property
-    def state(self):
+    def state(self) -> int | None:
         """Return the state of the sensor."""
-        return self.device.battery_level
+        return self.device.battery_level  # type: ignore [no-any-return]
 
 
 class FritzBoxTempSensor(FritzBoxEntity, SensorEntity):
-    """The entity class for Fritzbox temperature sensors."""
+    """The entity class for FRITZ!SmartHome temperature sensors."""
 
     @property
-    def state(self):
+    def state(self) -> float | None:
         """Return the state of the sensor."""
-        return self.device.temperature
+        return self.device.temperature  # type: ignore [no-any-return]
 
     @property
-    def extra_state_attributes(self):
+    def extra_state_attributes(self) -> SensorExtraAttributes:
         """Return the state attributes of the device."""
-        attrs = {
+        attrs: SensorExtraAttributes = {
             ATTR_STATE_DEVICE_LOCKED: self.device.device_lock,
             ATTR_STATE_LOCKED: self.device.lock,
         }
diff --git a/homeassistant/components/fritzbox/strings.json b/homeassistant/components/fritzbox/strings.json
index 6de6b6d9d9..336671fd7a 100644
--- a/homeassistant/components/fritzbox/strings.json
+++ b/homeassistant/components/fritzbox/strings.json
@@ -1,6 +1,6 @@
 {
   "config": {
-    "flow_title": "AVM FRITZ!Box: {name}",
+    "flow_title": "{name}",
     "step": {
       "user": {
         "description": "Enter your AVM FRITZ!Box information.",
@@ -36,4 +36,4 @@
       "invalid_auth": "[%key:common::config_flow::error::invalid_auth%]"
     }
   }
-}
\ No newline at end of file
+}
diff --git a/homeassistant/components/fritzbox/switch.py b/homeassistant/components/fritzbox/switch.py
index a7c1c8cf0f..b106a7d1eb 100644
--- a/homeassistant/components/fritzbox/switch.py
+++ b/homeassistant/components/fritzbox/switch.py
@@ -1,6 +1,9 @@
-"""Support for AVM Fritz!Box smarthome switch devices."""
+"""Support for AVM FRITZ!SmartHome switch devices."""
+from __future__ import annotations
 from typing import Callable
 
+from typing import Any
+
 from homeassistant.components.switch import SwitchEntity
 from homeassistant.config_entries import ConfigEntry
 from homeassistant.const import (
@@ -24,6 +27,7 @@ from .const import (
     CONF_COORDINATOR,
     DOMAIN as FRITZBOX_DOMAIN,
 )
+from .model import SwitchExtraAttributes
 
 ATTR_TOTAL_CONSUMPTION_UNIT_VALUE = ENERGY_KILO_WATT_HOUR
 
@@ -31,8 +35,8 @@ ATTR_TOTAL_CONSUMPTION_UNIT_VALUE = ENERGY_KILO_WATT_HOUR
 async def async_setup_entry(
     hass: HomeAssistant, entry: ConfigEntry, async_add_entities: Callable
 ) -> None:
-    """Set up the Fritzbox smarthome switch from ConfigEntry."""
-    entities = []
+    """Set up the FRITZ!SmartHome switch from ConfigEntry."""
+    entities: list[FritzboxSwitch] = []
     coordinator = hass.data[FRITZBOX_DOMAIN][entry.entry_id][CONF_COORDINATOR]
 
     for ain, device in coordinator.data.items():
@@ -56,34 +60,35 @@ async def async_setup_entry(
 
 
 class FritzboxSwitch(FritzBoxEntity, SwitchEntity):
-    """The switch class for Fritzbox switches."""
+    """The switch class for FRITZ!SmartHome switches."""
 
     @property
-    def available(self):
+    def available(self) -> bool:
         """Return if switch is available."""
-        return self.device.present
+        return self.device.present  # type: ignore [no-any-return]
 
     @property
-    def is_on(self):
+    def is_on(self) -> bool:
         """Return true if the switch is on."""
-        return self.device.switch_state
+        return self.device.switch_state  # type: ignore [no-any-return]
 
-    async def async_turn_on(self, **kwargs):
+    async def async_turn_on(self, **kwargs: Any) -> None:
         """Turn the switch on."""
         await self.hass.async_add_executor_job(self.device.set_switch_state_on)
         await self.coordinator.async_refresh()
 
-    async def async_turn_off(self, **kwargs):
+    async def async_turn_off(self, **kwargs: Any) -> None:
         """Turn the switch off."""
         await self.hass.async_add_executor_job(self.device.set_switch_state_off)
         await self.coordinator.async_refresh()
 
     @property
-    def extra_state_attributes(self):
+    def extra_state_attributes(self) -> SwitchExtraAttributes:
         """Return the state attributes of the device."""
-        attrs = {}
-        attrs[ATTR_STATE_DEVICE_LOCKED] = self.device.device_lock
-        attrs[ATTR_STATE_LOCKED] = self.device.lock
+        attrs: SwitchExtraAttributes = {
+            ATTR_STATE_DEVICE_LOCKED: self.device.device_lock,
+            ATTR_STATE_LOCKED: self.device.lock,
+        }
 
         if self.device.has_powermeter:
             attrs[
@@ -100,6 +105,6 @@ class FritzboxSwitch(FritzBoxEntity, SwitchEntity):
         return attrs
 
     @property
-    def current_power_w(self):
+    def current_power_w(self) -> float:
         """Return the current power usage in W."""
-        return self.device.power / 1000
+        return self.device.power / 1000  # type: ignore [no-any-return]
diff --git a/homeassistant/components/fritzbox/translations/ca.json b/homeassistant/components/fritzbox/translations/ca.json
index f8550b5bc3..efd81ddff8 100644
--- a/homeassistant/components/fritzbox/translations/ca.json
+++ b/homeassistant/components/fritzbox/translations/ca.json
@@ -10,7 +10,7 @@
         "error": {
             "invalid_auth": "Autenticaci\u00f3 inv\u00e0lida"
         },
-        "flow_title": "AVM FRITZ!Box: {name}",
+        "flow_title": "{name}",
         "step": {
             "confirm": {
                 "data": {
diff --git a/homeassistant/components/fritzbox/translations/de.json b/homeassistant/components/fritzbox/translations/de.json
index 1626372248..ceaca6fd19 100644
--- a/homeassistant/components/fritzbox/translations/de.json
+++ b/homeassistant/components/fritzbox/translations/de.json
@@ -4,13 +4,13 @@
             "already_configured": "Ger\u00e4t ist bereits konfiguriert",
             "already_in_progress": "Der Konfigurationsablauf wird bereits ausgef\u00fchrt",
             "no_devices_found": "Keine Ger\u00e4te im Netzwerk gefunden",
-            "not_supported": "Verbunden mit AVM FRITZ! Box, kann jedoch keine Smart Home-Ger\u00e4te steuern.",
+            "not_supported": "Verbunden mit AVM FRITZ!Box, kann jedoch keine Smart Home-Ger\u00e4te steuern.",
             "reauth_successful": "Die erneute Authentifizierung war erfolgreich"
         },
         "error": {
             "invalid_auth": "Ung\u00fcltige Zugangsdaten"
         },
-        "flow_title": "AVM FRITZ! Box: {name}",
+        "flow_title": "AVM FRITZ!Box: {name}",
         "step": {
             "confirm": {
                 "data": {
@@ -32,7 +32,7 @@
                     "password": "Passwort",
                     "username": "Benutzername"
                 },
-                "description": "Gib deine AVM FRITZ! Box-Informationen ein."
+                "description": "Gib deine AVM FRITZ!Box-Informationen ein."
             }
         }
     }
diff --git a/homeassistant/components/fritzbox/translations/en.json b/homeassistant/components/fritzbox/translations/en.json
index 61ca1e957b..5eb34096da 100644
--- a/homeassistant/components/fritzbox/translations/en.json
+++ b/homeassistant/components/fritzbox/translations/en.json
@@ -10,7 +10,7 @@
         "error": {
             "invalid_auth": "Invalid authentication"
         },
-        "flow_title": "AVM FRITZ!Box: {name}",
+        "flow_title": "{name}",
         "step": {
             "confirm": {
                 "data": {
diff --git a/homeassistant/components/fritzbox/translations/et.json b/homeassistant/components/fritzbox/translations/et.json
index 5ee2dc801f..849dc7fade 100644
--- a/homeassistant/components/fritzbox/translations/et.json
+++ b/homeassistant/components/fritzbox/translations/et.json
@@ -10,7 +10,7 @@
         "error": {
             "invalid_auth": "Tuvastamise viga"
         },
-        "flow_title": "",
+        "flow_title": "{name}",
         "step": {
             "confirm": {
                 "data": {
diff --git a/homeassistant/components/fritzbox/translations/he.json b/homeassistant/components/fritzbox/translations/he.json
index 035cb07a17..ec9248b5ea 100644
--- a/homeassistant/components/fritzbox/translations/he.json
+++ b/homeassistant/components/fritzbox/translations/he.json
@@ -1,5 +1,15 @@
 {
     "config": {
+        "abort": {
+            "already_configured": "\u05ea\u05e6\u05d5\u05e8\u05ea \u05d4\u05d4\u05ea\u05e7\u05df \u05db\u05d1\u05e8 \u05e0\u05e7\u05d1\u05e2\u05d4",
+            "already_in_progress": "\u05d6\u05e8\u05d9\u05de\u05ea \u05d4\u05ea\u05e6\u05d5\u05e8\u05d4 \u05db\u05d1\u05e8 \u05de\u05ea\u05d1\u05e6\u05e2\u05ea",
+            "no_devices_found": "\u05dc\u05d0 \u05e0\u05de\u05e6\u05d0\u05d5 \u05de\u05db\u05e9\u05d9\u05e8\u05d9\u05dd \u05d1\u05e8\u05e9\u05ea",
+            "reauth_successful": "\u05d4\u05d0\u05d9\u05de\u05d5\u05ea \u05de\u05d7\u05d3\u05e9 \u05d4\u05e6\u05dc\u05d9\u05d7"
+        },
+        "error": {
+            "invalid_auth": "\u05d0\u05d9\u05de\u05d5\u05ea \u05dc\u05d0 \u05d7\u05d5\u05e7\u05d9"
+        },
+        "flow_title": "{name}",
         "step": {
             "confirm": {
                 "data": {
@@ -7,8 +17,15 @@
                     "username": "\u05e9\u05dd \u05de\u05e9\u05ea\u05de\u05e9"
                 }
             },
+            "reauth_confirm": {
+                "data": {
+                    "password": "\u05e1\u05d9\u05e1\u05de\u05d4",
+                    "username": "\u05e9\u05dd \u05de\u05e9\u05ea\u05de\u05e9"
+                }
+            },
             "user": {
                 "data": {
+                    "host": "\u05de\u05d0\u05e8\u05d7",
                     "password": "\u05e1\u05d9\u05e1\u05de\u05d4",
                     "username": "\u05e9\u05dd \u05de\u05e9\u05ea\u05de\u05e9"
                 }
diff --git a/homeassistant/components/fritzbox/translations/hu.json b/homeassistant/components/fritzbox/translations/hu.json
index 44b68d5f54..81639b1d83 100644
--- a/homeassistant/components/fritzbox/translations/hu.json
+++ b/homeassistant/components/fritzbox/translations/hu.json
@@ -9,7 +9,7 @@
         "error": {
             "invalid_auth": "\u00c9rv\u00e9nytelen hiteles\u00edt\u00e9s"
         },
-        "flow_title": "AVM FRITZ!Box: {name}",
+        "flow_title": "{name}",
         "step": {
             "confirm": {
                 "data": {
@@ -22,7 +22,8 @@
                 "data": {
                     "password": "Jelsz\u00f3",
                     "username": "Felhaszn\u00e1l\u00f3n\u00e9v"
-                }
+                },
+                "description": "Friss\u00edtse a(z) {name} bejelentkez\u00e9si adatait."
             },
             "user": {
                 "data": {
diff --git a/homeassistant/components/fritzbox/translations/it.json b/homeassistant/components/fritzbox/translations/it.json
index 6aba6a007d..bf94dd476a 100644
--- a/homeassistant/components/fritzbox/translations/it.json
+++ b/homeassistant/components/fritzbox/translations/it.json
@@ -10,7 +10,7 @@
         "error": {
             "invalid_auth": "Autenticazione non valida"
         },
-        "flow_title": "AVM FRITZ!Box: {name}",
+        "flow_title": "{name}",
         "step": {
             "confirm": {
                 "data": {
diff --git a/homeassistant/components/fritzbox/translations/nl.json b/homeassistant/components/fritzbox/translations/nl.json
index aa4f796f44..b1be4c8214 100644
--- a/homeassistant/components/fritzbox/translations/nl.json
+++ b/homeassistant/components/fritzbox/translations/nl.json
@@ -10,7 +10,7 @@
         "error": {
             "invalid_auth": "Ongeldige authenticatie"
         },
-        "flow_title": "AVM FRITZ!Box: {name}",
+        "flow_title": "{name}",
         "step": {
             "confirm": {
                 "data": {
diff --git a/homeassistant/components/fritzbox/translations/no.json b/homeassistant/components/fritzbox/translations/no.json
index bd64b428bd..5ec0cc1acd 100644
--- a/homeassistant/components/fritzbox/translations/no.json
+++ b/homeassistant/components/fritzbox/translations/no.json
@@ -10,7 +10,7 @@
         "error": {
             "invalid_auth": "Ugyldig godkjenning"
         },
-        "flow_title": "",
+        "flow_title": "{name}",
         "step": {
             "confirm": {
                 "data": {
diff --git a/homeassistant/components/fritzbox/translations/pl.json b/homeassistant/components/fritzbox/translations/pl.json
index dc05e43183..d9832ee51a 100644
--- a/homeassistant/components/fritzbox/translations/pl.json
+++ b/homeassistant/components/fritzbox/translations/pl.json
@@ -10,7 +10,7 @@
         "error": {
             "invalid_auth": "Niepoprawne uwierzytelnienie"
         },
-        "flow_title": "AVM FRITZ!Box: {name}",
+        "flow_title": "{name}",
         "step": {
             "confirm": {
                 "data": {
diff --git a/homeassistant/components/fritzbox/translations/ru.json b/homeassistant/components/fritzbox/translations/ru.json
index adbdfa13d6..51e9aedc63 100644
--- a/homeassistant/components/fritzbox/translations/ru.json
+++ b/homeassistant/components/fritzbox/translations/ru.json
@@ -10,7 +10,7 @@
         "error": {
             "invalid_auth": "\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438."
         },
-        "flow_title": "AVM FRITZ!Box: {name}",
+        "flow_title": "{name}",
         "step": {
             "confirm": {
                 "data": {
diff --git a/homeassistant/components/fritzbox/translations/zh-Hant.json b/homeassistant/components/fritzbox/translations/zh-Hant.json
index 9c901bd92e..b90b87aaee 100644
--- a/homeassistant/components/fritzbox/translations/zh-Hant.json
+++ b/homeassistant/components/fritzbox/translations/zh-Hant.json
@@ -10,7 +10,7 @@
         "error": {
             "invalid_auth": "\u9a57\u8b49\u78bc\u7121\u6548"
         },
-        "flow_title": "AVM FRITZ!Box\uff1a{name}",
+        "flow_title": "{name}",
         "step": {
             "confirm": {
                 "data": {
