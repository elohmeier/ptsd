#!/usr/bin/env python3

import argparse

import requests
import yaml


def gen_network(metadata, no_ipv6_dns):
    ipv6 = [
        n
        for n in metadata["network-config"]["config"][0]["subnets"]
        if "ipv6" in n and n["ipv6"]
    ][0]

    txt = """# Generated by hcloud-netcfg
[Match]
MACAddress={}

[Network]
Address={}
Address={}
DNS=185.12.64.1
DNS=185.12.64.2
""".format(
        metadata["network-config"]["config"][0]["mac_address"],
        metadata["public-ipv4"] + "/32",
        ipv6["address"],
    )

    if not no_ipv6_dns:
        txt += """DNS={}
DNS={}
""".format(
            ipv6["dns_nameservers"][0],
            ipv6["dns_nameservers"][1],
        )

    txt += """
[Route]
Destination=0.0.0.0/0
Gateway=172.31.1.1
GatewayOnLink=true

[Route]
Destination=::/0
Gateway={}
GatewayOnLink=true
""".format(
        ipv6["gateway"],
    )

    return txt


def gen_env(metadata, private_networks):
    txt = """# Generated by hcloud-netcfg
HETZNER_HOSTNAME={}
HETZNER_INSTANCE_ID={}
HETZNER_PUBLIC_IPV4={}
HETZNER_PUBLIC_IPV6={}
HETZNER_AVAILABILITY_ZONE={}
HETZNER_REGION={}
""".format(
        metadata["hostname"],
        metadata["instance-id"],
        metadata["public-ipv4"],
        metadata["network-config"]["config"][0]["subnets"][1]["address"].split("/")[0],
        metadata["availability-zone"],
        metadata["region"],
    )

    for i, network in enumerate(private_networks):
        txt += "HETZNER_PRIVATE_IPV4_{}={}\n".format(i, network["ip"])

    return txt


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--metadata-file", "-m", type=argparse.FileType("rb"))
    parser.add_argument("--private-networks-file", "-p", type=argparse.FileType("rb"))
    parser.add_argument("--no-ipv6-dns", action="store_true")
    parser.add_argument("mode", choices=["network", "env", "hostname"])
    args = parser.parse_args()

    if args.metadata_file:
        metadata = yaml.load(args.metadata_file, Loader=yaml.CLoader)
    else:
        r = requests.get("http://169.254.169.254/hetzner/v1/metadata", timeout=5)
        if r.status_code != 200:
            raise Exception("Failed to get metadata")

        metadata = yaml.load(r.content, Loader=yaml.CLoader)

    if args.private_networks_file:
        private_networks = yaml.load(args.private_networks_file, Loader=yaml.CLoader)
    else:
        r = requests.get(
            "http://169.254.169.254/hetzner/v1/metadata/private-networks", timeout=5
        )
        if r.status_code != 200:
            raise Exception("Failed to get private networks")

        private_networks = yaml.load(r.content, Loader=yaml.CLoader)

    if args.mode == "env":
        print(gen_env(metadata, private_networks))
    elif args.mode == "network":
        print(gen_network(metadata, args.no_ipv6_dns))
    elif args.mode == "hostname":
        print(metadata["hostname"])
    else:
        raise Exception("Unknown mode")


if __name__ == "__main__":
    main()
